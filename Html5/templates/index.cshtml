@using System
@using Mediaparts.Publisher2.DAL;
@using System.IO;
@{
    if (@Model == null)
    {
        throw new NullReferenceException("Model cannot be null.");
    }
    if (!(@Model is PublicationIndexModel))
    {
        throw new ArgumentException(string.Format("Model of type {0} is expected, but was {1}.", typeof(PublicationIndexModel).FullName, @Model.GetType().FullName));
    }
}

<!DOCTYPE html>
<html prefix="og: http://ogp.me/ns#" xmlns="http://www.w3.org/1999/xhtml">
<head>
    @{
        string pathPrefix = string.IsNullOrEmpty(@Model.StaticPath) ? "" : @Model.StaticPath + "/";
    }

    <title>@Model.PublicationName</title>

    
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta property="og:title" content="@Model.PublicationName">
    <meta name="description" content="Animated publication">
    <meta property="og:description" content="Animated publication">
    <meta property="og:type" content="article">
    <meta property="og:image" content="@(pathPrefix)assets/flash/pages/page0001_s.png">
    <meta property="og:determiner" content="auto">
    <meta name="viewport" content="initial-scale=0.5, user-scalable=no, maximum-scale=0.5, minimal-ui"/>
    
    
    @if (!string.IsNullOrEmpty(@Model.Favicon))
    {
        <link rel="shortcut icon" href="@Model.Favicon" />
    }

    <script src="@(pathPrefix)html/static/build.js"></script>
    
    @if (@Model.IsEditor)
    {
        <script src="html/editor-utils.js"></script>
    }
    
    @if (@Model.UAAccount != null)
    {
        <script src="@(pathPrefix)html/static/analytics.js"></script>
        <script type="text/javascript">
    (function (global) {
        var startDate = new Date().getTime();
        var domain = typeof window.location !== "undefined" ? window.location.hostname : '';
        if (global.universalAnalytics) {
            @if (@Model.IsIPAnonymizationForGAOn)
            {
        <text>global.universalAnalytics.init([], ['@Model.UAAccount'], domain, 'Publisher-HTML5', startDate, '@Model.PublisherVersion', true);</text>
            }
            else
            {
        <text>global.universalAnalytics.init([], ['@Model.UAAccount'], domain, 'Publisher-HTML5', startDate, '@Model.PublisherVersion', false);</text>
            }
        }
        })(this);
        </script>
    }
    
    @if(@Model.IsPublishingBasic)
    {
        <script>
            BASIC_URL = './@Model.BasicUrl';
            BASIC_FIRST_PAGE = '@Model.FirstPageUrlName';
            function renderBasic() {
                function getXHR() {
                    if (window.XMLHttpRequest) {
                        return new XMLHttpRequest();
                    }
                    try {
                        return new ActiveXObject('MSXML2.XMLHTTP.6.0');
                    } catch (e) {
                        try {
                            // The fallback.
                            return new ActiveXObject('MSXML2.XMLHTTP.3.0');
                        } catch (e) {
                            alert('This browser is not AJAX enabled.');
                            return null;
                        }
                    }
                }

                var ajax = function (options) {
                    options = options || {};

                    var type = options.type || 'GET';
                    var url = options.url;
                    var data = options.data;
                    var xhr = getXHR();
                    try {
                        xhr.open(type, url, true);

                        xhr.onreadystatechange = function () {
                            var error = false;
                            var content = xhr.responseText;

                            // Parse the JSON before calling success.
                            if (options.dataType === 'json') {
                                try {
                                    content = JSON.parse(content);
                                } catch (e) {
                                    error = true;
                                }
                            }

                            if (!error && (xhr.status >= 200 && xhr.status < 300)) {
                                // The last two arguments only apply to v0.9.2.
                                if (options.success) options.success(content, xhr.statusText, xhr);
                            } else {
                                // This signature is inconsistent with v0.9.2, but is correct for 1.0.0.
                                if (options.error) options.error(xhr);
                            }
                        };

                        xhr.onerror = xhr.onabort = function () {
                            if (options.error) options.error(xhr);
                        };

                        xhr.send(data);
                    } catch (error) {
                        if (options.error) options.error(xhr);
                    }

                    return xhr;
                };

                function getHash() {
                    var match = window.location.href.match(/#(.*)$/);
                    return match ? match[1] : '';
                }

                var queryString = function () {
                    // This function is anonymous, is executed immediately and
                    // the return value is assigned to QueryString!
                    var query_string = {};
                    var query = window.location.search.substring(1);
                    if (query === "") return query_string;
                    var vars = query.split("&");
                    for (var i = 0; i < vars.length; i++) {
                        if (vars[i] === "") continue;
                        var pair = vars[i].split("=");
                        // If first entry with this name
                        if (typeof query_string[pair[0]] === "undefined") {
                            query_string[pair[0]] = pair[1];
                            // If second entry with this name
                        } else if (typeof query_string[pair[0]] === "string") {
                            var arr = [query_string[pair[0]], pair[1]];
                            query_string[pair[0]] = arr;
                            // If third or later entry with this name
                        } else {
                            query_string[pair[0]].push(pair[1]);
                        }
                    }
                    return query_string;
                }();


                var hash = getHash();
                var checkRegExp = /[^A-Za-z0-9\(\)\[\]@@.,$€;`~! _-]/g;
                var hash_split = hash.split("/");
                var page = decodeURIComponent(queryString.p || queryString.page || hash_split[0] || window.BASIC_FIRST_PAGE);

                if (BASIC_URL) {
                    var url = BASIC_URL;
                    if (page != BASIC_FIRST_PAGE) {
                        url = BASIC_URL.replace("page-" + BASIC_FIRST_PAGE, "page-" + page);
                    }

                    ajax({
                        type: 'OPTIONS',
                        url: url,
                        success: function (text, statusText, xhr) {
                            window.location = url;
                        },
                        error: function (xhr) {
                            window.location = BASIC_URL;
                        }
                    });
                }
            }
        </script>
        }
</head>
<body>
    <script type="text/javascript">
        if (!!window.addEventListener) {
            window.addEventListener('load', main);
        } else {
            window.attachEvent('onload', main);
        }

        function main() {

            var baseUrl = window.location.href.split('#')[0].split('@Model.HtmlIndexFileName')[0];
            PUBLICATION_NAME = "@Model.PublicationName";
            var publicationConfig = {};

            function PublisherAdapter(options) {
                LocalHashAdapter.call(this, options);
            }

            PublisherAdapter.prototype = Object.create(LocalHashAdapter.prototype);
            PublisherAdapter.constructor = PublisherAdapter;
            @if (!@Model.IsEditor && !@Model.IsForPreview)
            {
                <text>PublisherAdapter.prototype.translatePath = function(url) {
                url = LocalHashAdapter.prototype.translatePath.call(this, url);
                return url.replace('.json', '.js');
            }</text>
            }
            publicationConfig.adapter = new PublisherAdapter({
                firstPage: '@Model.FirstPageUrlName',
                mappings: {
                    'skins/current/': '@(pathPrefix)assets/html/skin/',
                    'assets/common/search/searchtext.js': '@(pathPrefix)assets/mobile/search/searchtext.js',
                    'assets/mobile/search/searchtext.js': '@(pathPrefix)assets/mobile/search/searchtext.js',
                    'assets/common/embed/page.html': baseUrl + '@(pathPrefix)assets/flash/page.html',
                    'assets/common/sound/flip/': '@(pathPrefix)html/static/static/sound/',
                    'assets/common/pages/text/': '@(pathPrefix)assets/common/page-textlayers/',
                    'assets/common/pages/substrates/': '@(pathPrefix)assets/common/page-html5-substrates/',
                    @if (!@Model.IsEditor)
                    {
                        <text>'assets/flash/search/': '@(pathPrefix)assets/mobile/search/',</text>
                    }
                    'static/html/embed.js': baseUrl + '@(pathPrefix)html/static/embed.js',
                    'static/html/': '@(pathPrefix)html/static/',
                    'static/mobile/': '@(pathPrefix)mobile/',
                    'assets/': '@(pathPrefix)assets/',
                    'locales/': '@(pathPrefix)assets/html/locale/'
                }
            });

            @if (@Model.UAAccount != null)
            {
                <text>
                    if (window.UniversalAnalytics) {
                        publicationConfig.analytics = new UniversalAnalytics();
                    }
                </text>
            }

            @if (@Model.PreviewMode == "mobile")
            {
                <text>
                    publicationConfig.navigator = {
                        'userAgent':
                            'Mozilla/5.0 (iPad; CPU OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1'
                    };
                </text>
            }
            else if (@Model.PreviewMode == "basic")
            {
                <text>
                    publicationConfig.navigator = {
                        'userAgent': 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0)'
                    };
                </text>
            }

            var nav = publicationConfig.navigator !== undefined ? publicationConfig.navigator : navigator;

            @if (@Model.IsPublishingMobile)
            {
                <text>
                    var detector = new PublicationDetector(new UserAgentDetector(nav), ['html', 'mobile']);
                </text>
            }
            else
            {
                <text>
                    var detector = new PublicationDetector(new UserAgentDetector(nav), ['html']);
                </text>
            }
            var isRenderable = detector.isRenderable();

            if (!isRenderable) {
                renderBasic();
            }

            publicationConfig.callback = function() {
                return detector.mainVersion();
            };


            publicationConfig.preloader = {
                backgroundColor: "@Model.Preloader.BackgroundColor",
                titleColor: "@Model.Preloader.TitleColor",
                titleText: "@Model.Preloader.TitleText",
                logoLink: {
                    image: "@Model.Preloader.LogoPath",
                    url: "@Model.Preloader.LogoUrl"
                }
            };

            @{

                if (@Model.IsEditor)
                {
                    <text>
                        publicationConfig.onPublicationLoad = function() {
                            publisherInterop.onPublicationLoaded();
                        };

                        window.computeColors = function(mainColor, secondColor, imageUrl, backgroundSize) {
                            var colorsFromImage = new ColorsFromImage();
                            if (imageUrl === '') {
                                colorsFromImage
                                    .setProperty({
                                        'main-color': mainColor,
                                        'second-color': secondColor,
                                        'background-size': backgroundSize
                                    });
                                var configJson = colorsFromImage.getVars(); //Getting config.json and setting it
                                publisherInterop.onColorComputed(JSON.stringify(configJson));
                            } else {
                                var image = new Image();
                                image.onload = function() {
                                    colorsFromImage
                                        .setProperty({
                                            'main-color': mainColor,
                                            'second-color': secondColor,
                                            'image': image,
                                            'background-size': backgroundSize
                                        });

                                    var configJson = colorsFromImage.getVars(); //Getting config.json and setting it
                                    publisherInterop.onColorComputed(JSON.stringify(configJson));
                                }
                                image.onerror = function(e) {
                                    console.error(e);
                                }
                                image.src = imageUrl;
                            }

                        }
                    </text>
                }
            }

            window.publication = new Publication(publicationConfig);

            @{

                if (@Model.IsEditor)
                {
                    <text>
                        window.target = 'book';
                        var informPositionChanged = function(bookState) {
                            if (window.publication &&
                                window.publication.app &&
                                window.publication.app &&
                                publication.app.pager &&
                                publication.app.pager.state) {
                                var pagerState = publication.app.pager.state;
                                publisherInterop
                                    .informPositionChanged(pagerState.leftPage, pagerState.rightPage, window.target);
                                window.target = 'book';
                            }
                        };
                        window.publication.on('turned', informPositionChanged);
                        window.publication.on('zoomed', informPositionChanged);
                        window.publication.on('unzoomed', informPositionChanged);
                        window.goToPage = function(id) {
                            if (window.publication &&
                                window.publication.app &&
                                window.publication.app &&
                                publication.app.pager) {
                                var pager = publication.app.pager;
                                window.target = 'External';
                                pager.goToPageById(id, window.target);
                            }
                        };
                    </text>
                }
            }
    };
</script>
</body>
</html>
